import fr.avianey.androidsvgdrawable.gradle.SvgDrawableTask

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'androidsvgdrawable'

// START Non-FOSS component
apply plugin: 'io.fabric'
// END Non-FOSS component

buildscript {
    repositories {
        jcenter()
        // START Non-FOSS component
        maven { url 'https://maven.fabric.io/public' }
        // END Non-FOSS component
    }

    dependencies {
        // START Non-FOSS component
        classpath "io.fabric.tools:gradle:$fabric_plugin_version"
        // END Non-FOSS component

        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-android-extensions:$kotlin_version"
    }
}

android {

    defaultConfig {
        applicationId "org.mariotaku.twidere"
        minSdkVersion 14
        targetSdkVersion 25
        versionCode 291
        versionName '3.4.29'
        multiDexEnabled true

        buildConfigField 'boolean', 'LEAK_CANARY_ENABLED', 'Boolean.parseBoolean("true")'
        buildConfigField 'boolean', 'SHOW_CUSTOM_TOKEN_DIALOG', 'Boolean.parseBoolean("false")'
        buildConfigField 'boolean', 'HOTMOBI_LOG_ENABLED', 'Boolean.parseBoolean("false")'

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    aaptOptions {
        additionalParameters "--no-version-vectors"
    }

    productFlavors {
        // START Non-FOSS component
        google {}
        // END Non-FOSS component
        fdroid {}
    }
    buildTypes {
        debug {
            minifyEnabled false
            shrinkResources false
            resValue("bool", "debug", "true")
        }
        release {
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            resValue("bool", "debug", "false")
        }
    }
    sourceSets.each {
        it.res.srcDirs += project.files("src/${it.name}/res-localized")
        it.res.srcDirs += project.files("src/${it.name}/res-svg2png")
        it.java.srcDirs += "src/${it.name}/kotlin"
    }
    testOptions {
        unitTests.returnDefaultValues = true
    }

}

repositories {
    mavenLocal()
    maven { url 'https://s3.amazonaws.com/repo.commonsware.com' }
    // START Non-FOSS component
    maven { url 'https://maven.fabric.io/public' }
    // END Non-FOSS component
    flatDir { dirs "$projectDir/lib" }
}

dependencies {
//    wearApp project(':twidere.wear')
    kapt 'com.bluelinelabs:logansquare-compiler:1.3.7'
    kapt 'com.hannesdorfmann.parcelableplease:processor:1.0.2'
    kapt 'com.google.dagger:dagger-compiler:2.8'
    kapt 'com.github.mariotaku.ObjectCursor:processor:0.9.12'

    compile project(':twidere.component.common')
    compile project(':twidere.component.nyan')

    // START Non-FOSS component
    googleCompile "com.google.android.gms:play-services-maps:$play_services_version"
    googleCompile "com.google.android.gms:play-services-auth:$play_services_version"
    googleCompile 'com.google.maps.android:android-maps-utils:0.4.4'
    googleCompile("com.crashlytics.sdk.android:crashlytics:$crashlyrics_version@aar") {
        transitive = true
    }
    googleCompile 'com.anjlab.android.iab.v3:library:1.0.38'
    googleCompile "com.dropbox.core:dropbox-core-sdk:$dropbox_core_sdk_version"
    googleCompile("com.google.apis:google-api-services-drive:$google_api_drive_version") {
        exclude group: 'org.apache.httpcomponents'
    }
    // END Non-FOSS component

    fdroidCompile 'org.osmdroid:osmdroid-android:5.5:release@aar'

    debugCompile 'com.facebook.stetho:stetho:1.4.2'
    debugCompile 'com.facebook.stetho:stetho-okhttp3:1.4.2'
    debugCompile 'com.facebook.stetho:stetho-js-rhino:1.4.2'
    debugCompile 'com.squareup.leakcanary:leakcanary-android:1.5'

    provided 'javax.annotation:jsr250-api:1.0'

    testCompile 'junit:junit:4.12'

    androidTestCompile "com.android.support:support-annotations:$android_support_lib_version"
    androidTestCompile 'com.android.support.test:runner:0.5'
    androidTestCompile 'com.android.support.test:rules:0.5'
    androidTestCompile 'commons-io:commons-io:2.5'

    compile 'com.android.support:multidex:1.0.1'
    compile "com.android.support:support-v4:$android_support_lib_version"
    compile "com.android.support:appcompat-v7:$android_support_lib_version"
    compile "com.android.support:cardview-v7:$android_support_lib_version"
    compile "com.android.support:recyclerview-v7:$android_support_lib_version"
    compile "com.android.support:preference-v7:$android_support_lib_version"
    compile "com.android.support:preference-v14:$android_support_lib_version"
    compile "com.android.support:customtabs:$android_support_lib_version"
    compile "com.android.support:design:$android_support_lib_version"
    compile "com.android.support:percent:$android_support_lib_version"
    compile 'com.twitter:twitter-text:1.13.0'
    compile 'com.nostra13.universalimageloader:universal-image-loader:1.9.5'
    compile 'com.davemorrissey.labs:subsampling-scale-image-view:3.6.0'
    compile 'com.squareup:otto:1.3.8'
    compile 'dnsjava:dnsjava:2.1.7'
    compile 'com.commonsware.cwac:layouts:0.4.3'
    compile 'com.rengwuxian.materialedittext:library:2.1.4'
    compile 'com.pnikosis:materialish-progress:1.7'
    compile 'com.github.mariotaku:MessageBubbleView:1.6'
    compile 'com.github.mariotaku:DragSortListView:0.6.1'
    compile 'com.github.uucky:ColorPicker-Android:0.9.7@aar'
    compile 'pl.droidsonroids.gif:android-gif-drawable:1.1.15'
    compile 'com.sprylab.android.texturevideoview:texturevideoview:1.1.1'
    compile 'com.squareup:pollexor:2.0.4'
    compile 'com.squareup:tape:1.2.3'
    compile 'org.apache.commons:commons-lang3:3.5'
    compile 'commons-primitives:commons-primitives:1.0'
    compile 'org.apache.james:apache-mime4j-core:0.7.2'
    compile 'org.apache.james:apache-mime4j-storage:0.7.2'
    compile 'com.bluelinelabs:logansquare:1.3.7'
    compile 'com.soundcloud.android:android-crop:1.0.1@aar'
    compile 'com.hannesdorfmann.parcelableplease:annotation:1.0.2'
    compile 'com.github.mariotaku:PickNCrop:0.9.19'
    compile "com.github.mariotaku.RestFu:library:$mariotaku_restfu_version"
    compile "com.github.mariotaku.RestFu:okhttp3:$mariotaku_restfu_version"
    compile 'com.squareup.okhttp3:okhttp:3.5.0'
    compile 'com.lnikkila:extendedtouchview:0.1.0'
    compile 'com.google.dagger:dagger:2.8'
    compile 'org.attoparser:attoparser:2.0.1.RELEASE'
    compile 'com.getkeepsafe.taptargetview:taptargetview:1.6.0'
    compile 'net.ypresto.androidtranscoder:android-transcoder:0.2.0'
    compile 'com.github.mariotaku.MediaViewerLibrary:base:0.9.17'
    compile 'com.github.mariotaku.MediaViewerLibrary:subsample-image-view:0.9.17'
    compile 'com.github.mariotaku:SQLiteQB:0.9.10'
    compile 'com.github.mariotaku.ObjectCursor:core:0.9.12'
    compile 'com.github.mariotaku:MultiValueSwitch:0.9.7'
    compile 'com.github.mariotaku:AbstractTask:0.9.4'
    compile "com.github.mariotaku.CommonsLibrary:parcel:$mariotaku_commons_library_version"
    compile "com.github.mariotaku.CommonsLibrary:io:$mariotaku_commons_library_version"
    compile "com.github.mariotaku.CommonsLibrary:text:$mariotaku_commons_library_version"
    compile "com.github.mariotaku.CommonsLibrary:text-kotlin:$mariotaku_commons_library_version"
    compile 'com.github.mariotaku:KPreferences:0.9.5'
    compile 'com.github.mariotaku:Chameleon:0.9.14'
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    compile 'nl.komponents.kovenant:kovenant:3.3.0'
    compile 'nl.komponents.kovenant:kovenant-android:3.3.0'
    compile 'nl.komponents.kovenant:kovenant-functional:3.3.0'
    compile 'nl.komponents.kovenant:kovenant-combine:3.3.0'
}

task svgToDrawable(type: SvgDrawableTask) {
    // specify where to pick SVG from
    from = files('src/main/svg/drawable')
    // specify the android res folder
    to = file('src/main/res-svg2png')
    // override files only if necessary
    overwriteMode = 'ifModified'
    // let generate PNG for the following densities only
    targetedDensities = ['hdpi', 'mdpi', 'xhdpi', 'xxhdpi', 'xxxhdpi']
    // relative path of the file specifying nine patch specs
    ninePatchConfig = file('src/main/svg/drawable/9patch.json')
    // output format of the generated resources
    outputFormat = 'PNG'

    outputType = 'drawable'
}

task svgToMipmap(type: SvgDrawableTask) {
    // specify where to pick SVG from
    from = files('src/main/svg/mipmap')
    // specify the android res folder
    to = file('src/main/res-svg2png')
    // override files only if necessary
    overwriteMode = 'ifModified'
    // let generate PNG for the following densities only
    targetedDensities = ['hdpi', 'mdpi', 'xhdpi', 'xxhdpi', 'xxxhdpi']
    // output format of the generated resources
    outputFormat = 'PNG'

    outputType = 'mipmap'
}

// START Non-FOSS component
apply plugin: 'com.google.gms.google-services'
// END Non-FOSS component